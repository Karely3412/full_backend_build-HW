# BREAK DOWN OF WHAT THE CODE IS DOING.

1. Importing necessary modules:

  - psycopg2: A PostgreSQL adapter for Python.
  - Flask: A web framework for Python.
  - jsonify: A Flask function for creating JSON responses.
  - request: A Flask object that represents the HTTP request.
  
2. Creating a Flask application:

  - The Flask class is used to create an instance of the application, with __name__ as the argument.

3. Establishing a connection to the PostgreSQL database:

  - The psycopg2.connect() function is used to connect to the database. In this code, the database name is "be-cruda", and the host is set to "localhost".
  - A cursor object is created using conn.cursor() to execute SQL queries.

4. Creating database tables:

  - The create_tables() function is defined to create two tables: "Organizations" and "Students". It uses the cursor.execute() method to execute SQL queries.
  - The "Organizations" table has columns for org_id, name, phone, email, city, state, and active.
  - The "Students" table has columns for student_id, first_name, last_name, email, phone, city, state, org_id, and active.
  - The conn.commit() method is called to commit the changes to the database.

5. Routes for organizations:

  -/org/add (POST): Adds a new organization to the database. The organization details are obtained from the request data, 
    and an SQL INSERT query is executed to insert the data into the "Organizations" table.

  -/org/get (GET): Retrieves all organizations from the database where active = 1. 
    The SQL SELECT query is executed, and the results are returned as a JSON response.

  -/org/active (GET): Retrieves all active organizations from the database. Similar to the previous route, 
    but it doesn't filter based on active column.

  -/org/get/<org_id> (GET): Retrieves a specific organization based on the provided org_id. 
    The SQL SELECT query is executed with a WHERE clause to filter by org_id, and the result is returned as a JSON response.

  -/org/activate/<org_id> (PATCH): Activates an organization based on the provided org_id. 
    The SQL UPDATE query is executed to set the active column to 1.

  -/org/deactivate/<org_id> (PATCH): Deactivates an organization based on the provided org_id. 
    The SQL UPDATE query is executed to set the active column to 0.

  -/org/update/<org_id> (PATCH): Updates the details of an organization based on the provided org_id. 
    The existing organization details are fetched from the database, and the request data is used to update the specific fields. 
    The SQL UPDATE query is executed to modify the organization record.

6. Routes for students:

  - /student/add (POST): Adds a new student to the database. The student details are obtained from the request data, and an SQL INSERT query is executed to insert the data into the "Students" table.
  - /students/get (GET): Retrieves all students from the database. The SQL SELECT query


#______________________________________________________________


1. @app.route('/student/update/<student_id>', methods=["PATCH"]): 
  - This line defines a route for the URL /student/update/<student_id>, where <student_id> is a variable that represents the ID of the student being updated. 
    The route is configured to only accept HTTP PATCH requests.

2. def update_stud_status(student_id):
  -This is the function that will be executed when a request is made to the defined route. It takes the student_id as a parameter.

3. cursor.execute("SELECT first_name, last_name, email, phone, city, state, org_id, active FROM Students WHERE student_id =%s;", [student_id]): 
  -This line executes a SQL query to retrieve the information of the student with the given student_id from the database. 
    It fetches a single row of the result using cursor.fetchone().

4. if result is None: return jsonify({"error": "invalid input"}), 404:
  -If no student is found for the given student_id, the code returns a JSON response with an error message and a status code of 404 (Not Found).

5. result_dict = { ... }:
  - This block initializes a dictionary result_dict and populates it with the retrieved student information. 
    Each field of the dictionary corresponds to a column in the Students table.

6. conn.commit():
  - This line commits the changes made to the database so far. It ensures that any previous database operations are persisted.

7. req_data = request.json if request.json else request.form:
  - This line checks if the req -uest body contains JSON data (request.json) and assigns it to req_data. 
    If the JSON data is not available, it falls back to retrieving form data (request.form).

8. for key, val in req_data.items():
  - ...: This loop iterates over the items of req_data, which can be either JSON or form data. 
    It updates the corresponding fields in result_dict if the values in the request data are not empty or null.

9. cursor.execute('''UPDATE Students SET ... ''', [...]):
  - This line executes an SQL update statement to modify the student's information in the database. 
    The values to be updated are provided as parameters in a list. The UPDATE statement sets the new values for each field based on the values in result_dict and filters the update operation based on the student_id.

10. conn.commit():
  - This line commits the changes made to the database, persisting the updated student information.


return jsonify(result_dict), 201: Finally, the function returns a JSON response containing the updated student information (result_dict) and a status code of 201 (Created) to indicate that the update was successful.
Overall, this code retrieves the existing information of a student from the database, updates the relevant fields based on the provided data in the PATCH request, and persists the changes in the database. It then returns the updated student information in a JSON response.



#______________________________________________________________


# import psycopg2
# from flask import Flask, jsonify, request

# conn = psycopg2.connect('dbname=usermgt host=localhost')
# cursor = conn.cursor()
# app = Flask(__name__)

# # Create the Database
# def create_all():
#     cursor.execute("""
#       CREATE TABLE IF NOT EXISTS Users (
#          user_id SERIAL PRIMARY KEY,
#          first_name VARCHAR NOT NULL,
#          last_name VARCHAR,
#          email VARCHAR NOT NULL UNIQUE,
#          phone VARCHAR,
#          city VARCHAR,
#          state VARCHAR,
#          org_id int,
#          active smallint
#       );
#    """)
#     cursor.execute("""
#       CREATE TABLE IF NOT EXISTS Organizations (
#          org_id SERIAL PRIMARY KEY,
#          name VARCHAR NOT NULL,
#          phone VARCHAR,
#          city VARCHAR,
#          state VARCHAR,
#          active smallint
#       );
#    """)
#     print("Creating tables...")
#     conn.commit()

# # Route to Add User to Database
# @app.route('/user/add', methods=['POST'])
# def user_add():
#     post_data = request.form if request.form else request.json
#     first_name = post_data.get('first_name')
#     last_name = post_data.get('last_name')
#     email = post_data.get('email')
#     phone = post_data.get('phone')
#     city = post_data.get('city')
#     state = post_data.get('state')
#     org_id = post_data.get('org_id')
#     active = post_data.get('active')

#     cursor.execute(
#         "INSERT INTO USERS (first_name, last_name, email, phone, city, state, org_id, active) VALUES (%s,%s,%s,%s,%s,%s,%s,%s)",
#         [first_name, last_name, email, phone, city, state, org_id, active])
#     conn.commit()
#     # add_user(first_name, last_name, email, phone, city, state, org_id, active)

#     return jsonify("User created"), 201


# @app.route('/users', methods=["GET"])
# def get_all_active_users():
#     cursor.execute(
#         "SELECT user_id, first_name, last_name, email, phone, city, state, org_id, active FROM Users WHERE active = 1;")
#     results = cursor.fetchall()
#     if not results:
#         return jsonify('No Users in Table'), 404
#     else:
#         results_list = []
#         for result in results:
#             result_dict = {
#                 "user_id": result[0],
#                 "first_name": result[1],
#                 "last_name": result[2],
#                 "email": result[3],
#                 "phone": result[4],
#                 "city": result[5],
#                 "state": result[6],
#                 "org_id": result[7],
#                 "active": result[8]
#             }
#             results_list.append(result_dict)
#         return jsonify(results_list), 200


# @app.route('/user/<id>', methods=["GET"])
# def get_user_by_id(id):
#     cursor.execute(
#         "SELECT user_id, first_name, last_name, email, phone, city, state, org_id, active FROM Users WHERE user_id = %s;",
#         [id])
#     result = cursor.fetchone()

#     if not result:
#         return jsonify('That user does not exist'), 404
#     else:

#         result_dict = {
#             "user_id": result[0],
#             "first_name": result[1],
#             "last_name": result[2],
#             "email": result[3],
#             "phone": result[4],
#             "city": result[5],
#             "state": result[6],
#             "org_id": result[7],
#             "active": result[8]
#         }

#         return jsonify(result_dict), 200


# @app.route('/user/activate/<id>', methods=["PATCH"])
# def activate_user(id):
#     cursor.execute("UPDATE Users SET active = 1 WHERE user_id = %s", [id])
#     conn.commit()
#     return jsonify("User Activated"), 200


# @app.route('/user/deactivate/<id>', methods=["PATCH"])
# def deactivate_user(id):
#     cursor.execute("UPDATE Users SET active = 0 WHERE user_id = %s", [id])
#     conn.commit()
#     return jsonify("User Deactivated"), 200


# @app.route('/user/update/<id>', methods=["PUT"])
# def update_user_by_id(id):
#     cursor.execute(
#         "SELECT user_id, first_name, last_name, email, phone, city, state, org_id, active FROM Users WHERE user_id =%s;",
#         [id])
#     result = cursor.fetchone()

#     if not result:
#         return jsonify('That user does not exist'), 404
#     else:

#         result_dict = {
#             "user_id": result[0],
#             "first_name": result[1],
#             "last_name": result[2],
#             "email": result[3],
#             "phone": result[4],
#             "city": result[5],
#             "state": result[6],
#             "org_id": result[7],
#             "active": result[8]
#         }

#     post_data = request.form if request.form else request.json

#     for key, val in post_data.copy().items():
#         if not val:
#             post_data.pop(key)

#     result_dict.update(post_data)

#     cursor.execute(
#         '''UPDATE Users SET 
#         first_name = %s, 
#         last_name= %s, 
#         email= %s, 
#         phone= %s, 
#         city= %s, 
#         state= %s, 
#         org_id= %s, 
#         active= %s 
        
#         WHERE user_id = %s
#     ;''',
#         [result_dict['first_name'],
#          result_dict['last_name'],
#          result_dict["email"],
#          result_dict["phone"],
#          result_dict["city"],
#          result_dict['state'],
#          result_dict['org_id'],
#          result_dict['active'],
#          result_dict['user_id']])
#     conn.commit()
#     return jsonify('user updated')


# if __name__ == "__main__":
#     create_all()
#     app.run(port="8086", host="0.0.0.0", debug=True)